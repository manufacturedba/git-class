section
    section
        h4 Best practices
    section
        div.
            Commit as much as possible
        p.
            Git cannot protect you unless you commit.  You are by all means welcome
            to not publish anything until you're done, but commit before pursuing
            new tasks.
    section
        div.
            Sync often and rebase before publishing
        small.
            If you have already published or have other team members working on your branch,
            skip the rebase.
        pre
            code.
                alias = !git fetch origin
    section
        p.
            Do not  <code> git reset --hard</code> <small>(Sorry)</small>
        p.
            Instead use
        p
            pre.
                <code>git checkout -b &lt;experimental_branch_name&gt;</code>
        p.
            OR
        p
            pre.
                <code>git stash</code>
                <code>git checkout .</code>
    section
        div.
            Release tags &mdash; not branches
        p(class="fragment").
            Tags and branches both point at commits, but tags cannot "move forward".
            This means you always have a clear understanding of what is deployed.
    section
        p.
            Creating tags from branches
        pre
            code.
                git checkout &lt;branch_name&gt;
                git tag &lt;tag_name&gt;
    section
        p.
            Creating branches from tags
        pre
            code.
                git checkout &lt;tag_name&gt;
                git checkout -b &lt;branch_name&gt;
section
    section
        h5.
            Do not force-push
    section
        div.
            Seriously, don't force-push
        img(class="fragment", src="../views/static/obi-wan-hates.gif")
    section
        div.
            Alright, you can force-push
    section
        div.
            What are some reasons for force-pushing?
        ul
            li(class="fragment") You've pushed sensitive data to the repository &mdash; a simple revert won't erase history
            li(class="fragment") That's it.
        p(class="fragment").
            If you come up with any others, record your findings in <code>/dev/null</code>
    section
        div.
            How to properly force-push:
        ul
            li(class="fragment") Let the team know prior to pushing.  Everyone will be unavoidably be affected especially if working on the same branch.
            li(class="fragment").
                Make sure no commits will be lost
            li(class="fragment").
                Make sure all branches checked out from the updated branch are also
                updated afterwards.
    section
        div.
            How to recover from a force-push
    section
        p.
            All force-pushes will spit out a similar message
        pre
            code.
                To user@host:repo.git
                + abcdef0...1234567 HEAD -> branchname (forced update)
        p(class="fragment").
            <code>abcdef0</code> refers to the previous commit your HEAD was pointing
            at.  By checking it out, you can restore the state of the repostory prior
            to force-pushing.
        pre(class="fragment")
            code.
                git checkout abcdef0
                git push -f
